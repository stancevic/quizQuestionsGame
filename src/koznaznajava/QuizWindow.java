/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package koznaznajava;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author WIN 10
 */
public class QuizWindow extends javax.swing.JFrame {

    /**
     * Creates new form QuizWindow
     */
    int buttonWithCorrectAnswer = -1;
    int currentQuestion = -1;
    int[] arrayOfQuestions = new int[10];   //ints of this array are id values of questions from the database
    int[] answerRandomArray = new int[4];    //this array will be used for shuffling answers on different buttons
    
    boolean questionAnswered = false;   //this will be used to disable clicking other buttons after one answer button
                                        //is already clicked
    int score = -1;
    int wrongAnswerScore = -1;
    
    public QuizWindow() {
        initComponents();
        
        this.setRandom(arrayOfQuestions);
        
        answerRandomArray[0] = 0;
        answerRandomArray[1] = 1;
        answerRandomArray[2] = 2;
        answerRandomArray[3] = 3;
        this.shuffle(answerRandomArray);
        //array index shows from which column of the table in the database
        //the answer is read, while the value that will be shuffled decides
        //on which button the answer will be shown
        
        currentQuestion = 0;
        score = 0;
        wrongAnswerScore = 0;
        this.setNextQuestion(currentQuestion);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton0 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButtonNextQuestion = new javax.swing.JButton();
        jTextFieldCurrentQuestionNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaQuestion = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton0.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        jButton0.setText("jButton0");
        jButton0.setFocusPainted(false);
        jButton0.setForeground(Color.WHITE);
        jButton0.setBackground(KoZnaZnaJava.NEW_BLUE);
        jButton0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton0ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        jButton1.setText("jButton1");
        jButton1.setBackground(KoZnaZnaJava.NEW_BLUE);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setFocusPainted(false);
        jButton1.setForeground(Color.WHITE);

        jButton2.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        jButton2.setText("jButton2");
        jButton2.setForeground(Color.WHITE);
        jButton2.setBackground(KoZnaZnaJava.NEW_BLUE);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.setFocusPainted(false);

        jButton3.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        jButton3.setText("jButton3");
        jButton3.setForeground(Color.WHITE);
        jButton3.setBackground(KoZnaZnaJava.NEW_BLUE);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.setFocusPainted(false);

        jButtonNextQuestion.setFont(new java.awt.Font("sansserif", 0, 20)); // NOI18N
        jButtonNextQuestion.setText("Следеће питање");
        jButtonNextQuestion.setForeground(Color.WHITE);
        jButtonNextQuestion.setBackground(KoZnaZnaJava.NEW_BLUE);
        jButtonNextQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextQuestionActionPerformed(evt);
            }
        });
        jButtonNextQuestion.setFocusPainted(false);

        jTextFieldCurrentQuestionNumber.setEditable(false);
        jTextFieldCurrentQuestionNumber.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTextFieldCurrentQuestionNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldCurrentQuestionNumber.setBackground(Color.white);

        jTextAreaQuestion.setColumns(20);
        jTextAreaQuestion.setFont(new java.awt.Font("sansserif", 0, 30)); // NOI18N
        jTextAreaQuestion.setLineWrap(true);
        jTextAreaQuestion.setRows(5);
        jTextAreaQuestion.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextAreaQuestion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonNextQuestion)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton0, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextFieldCurrentQuestionNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 958, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(145, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jTextFieldCurrentQuestionNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonNextQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNextQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextQuestionActionPerformed
        if(!questionAnswered){
            switch(buttonWithCorrectAnswer){
                case 0: jButton0.setBackground(KoZnaZnaJava.NEW_GREEN); break;
                case 1: jButton1.setBackground(KoZnaZnaJava.NEW_GREEN); break;
                case 2: jButton2.setBackground(KoZnaZnaJava.NEW_GREEN); break;
                case 3: jButton3.setBackground(KoZnaZnaJava.NEW_GREEN); break;
            }
            
            int delayMilliseconds = 1800;
            Timer timer = new Timer(delayMilliseconds, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    currentQuestion++;
                    if(currentQuestion < 10){
                        setNextQuestion(currentQuestion);
                    }else{
                        endOfGame();
                    }
                }
            });
            
            questionAnswered = true;
            jButtonNextQuestion.setBackground(KoZnaZnaJava.NEW_YELLOW);
            // Start the timer
            timer.setRepeats(false); // Only run the ActionListener once
            timer.start();
        }
    }//GEN-LAST:event_jButtonNextQuestionActionPerformed

    private void jButton0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton0ActionPerformed
        if(!questionAnswered){
            if(buttonWithCorrectAnswer == 0){
                jButton0.setBackground(KoZnaZnaJava.NEW_GREEN);
                
                score++;
            }else{
                jButton0.setBackground(KoZnaZnaJava.NEW_RED);
                wrongAnswerScore++;
            
                switch(buttonWithCorrectAnswer){
                    case 1: jButton1.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;

                    case 2: jButton2.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;

                    case 3: jButton3.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;
                }
            }
            questionAnswered = true;
            jButtonNextQuestion.setBackground(KoZnaZnaJava.NEW_YELLOW);

            int delayMilliseconds = 1800;
            Timer timer = new Timer(delayMilliseconds, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    currentQuestion++;
                    if(currentQuestion < 10){
                        setNextQuestion(currentQuestion);
                    }else{
                        endOfGame();
                    }
                }
            });
            // Start the timer
            timer.setRepeats(false); // Only run the ActionListener once
            timer.start();
        }
        
        
    }//GEN-LAST:event_jButton0ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(!questionAnswered){
            if(buttonWithCorrectAnswer == 1){
                jButton1.setBackground(KoZnaZnaJava.NEW_GREEN);
                score++;
            }else{
                jButton1.setBackground(KoZnaZnaJava.NEW_RED);
                wrongAnswerScore++;
                
                switch(buttonWithCorrectAnswer){
                    case 0: jButton0.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;

                    case 2: jButton2.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;

                    case 3: jButton3.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;
                }
            }
            questionAnswered = true;
            jButtonNextQuestion.setBackground(KoZnaZnaJava.NEW_YELLOW);

            int delayMilliseconds = 1800;
            Timer timer = new Timer(delayMilliseconds, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    currentQuestion++;
                    if(currentQuestion < 10){
                        setNextQuestion(currentQuestion);
                    }else{
                        endOfGame();
                    }
                }
            });
            // Start the timer
            timer.setRepeats(false); // Only run the ActionListener once
            timer.start();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(!questionAnswered){
            if(buttonWithCorrectAnswer == 2){
                jButton2.setBackground(KoZnaZnaJava.NEW_GREEN);
                score++;
            }else{
                jButton2.setBackground(KoZnaZnaJava.NEW_RED);
                wrongAnswerScore++;

                switch(buttonWithCorrectAnswer){
                    case 0: jButton0.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;

                    case 1: jButton1.setBackground(KoZnaZnaJava.NEW_GREEN); 
                    break;

                    case 3: jButton3.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;
                }
            }
            questionAnswered = true;
            jButtonNextQuestion.setBackground(KoZnaZnaJava.NEW_YELLOW);

            int delayMilliseconds = 1200;
            Timer timer = new Timer(delayMilliseconds, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    currentQuestion++;
                    if(currentQuestion < 10){
                        setNextQuestion(currentQuestion);
                    }else{
                        endOfGame();
                    }
                }
            });
            // Start the timer
            timer.setRepeats(false); // Only run the ActionListener once
            timer.start();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(!questionAnswered){
            if(buttonWithCorrectAnswer == 3){
                jButton3.setBackground(KoZnaZnaJava.NEW_GREEN);
                score++;
            }else{
                jButton3.setBackground(KoZnaZnaJava.NEW_RED);
                wrongAnswerScore++;

                switch(buttonWithCorrectAnswer){
                    case 0: jButton0.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;

                    case 1: jButton1.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;

                    case 2: jButton2.setBackground(KoZnaZnaJava.NEW_GREEN);
                    break;
                }
            };
            questionAnswered = true;
            jButtonNextQuestion.setBackground(KoZnaZnaJava.NEW_YELLOW);

            int delayMilliseconds = 1800;
            Timer timer = new Timer(delayMilliseconds, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    currentQuestion++;
                    if(currentQuestion < 10){
                        setNextQuestion(currentQuestion);
                    }else{
                        endOfGame();
                    }
                }
            });
            // Start the timer
            timer.setRepeats(false); // Only run the ActionListener once
            timer.start();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuizWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuizWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuizWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuizWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuizWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton0;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonNextQuestion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaQuestion;
    private javax.swing.JTextField jTextFieldCurrentQuestionNumber;
    // End of variables declaration//GEN-END:variables

    private void setRandom(int[] arrayInt) {
        Random random = new Random();
        int min = 1;
        int max = 74;
        
        boolean repetition; //used to check if an int is already loaded into array
                            //so the same question isn't selected twice
        
        for(int i = 0; i < 10;){
            repetition = false;
            int randomNumber = random.nextInt(max - min + 1) + min;
            
            for(int j = 0; j < i; j++){
                if(arrayInt[j] == randomNumber){
                    repetition = true;
                    break;
                }
            }
            
            if(repetition){
                continue;
            }else{
                arrayInt[i] = randomNumber;
                i++;
            }
        }
    }

    private void setNextQuestion(int currentQuestion){
        int x = currentQuestion + 1;
        jTextFieldCurrentQuestionNumber.setText("Питање " + x);
        questionAnswered = false;
        
        if(currentQuestion !=0 ){
            jButton0.setBackground(KoZnaZnaJava.NEW_BLUE);
            jButton1.setBackground(KoZnaZnaJava.NEW_BLUE);
            jButton2.setBackground(KoZnaZnaJava.NEW_BLUE);
            jButton3.setBackground(KoZnaZnaJava.NEW_BLUE);
            jButtonNextQuestion.setBackground(KoZnaZnaJava.NEW_BLUE);
        }
        
        this.shuffle(answerRandomArray);
        
        String correctAnswer = null;
        String falseAnswer1 = null;
        String falseAnswer2 = null;
        String falseAnswer3 = null;
        
        if(currentQuestion == 9){
            jButtonNextQuestion.setText("Заврши квиз");
        }
        
        try {
            Connection connection = DriverManager.getConnection(KoZnaZnaJava.QUESTIONS_DATABASE_URL);
            Statement s = connection.createStatement();
            
            ResultSet rs = s.executeQuery("SELECT * FROM Questions WHERE ID = " + arrayOfQuestions[currentQuestion]);
            while(rs.next()){
                jTextAreaQuestion.setText(rs.getString("Question"));
            }
            
            rs = s.executeQuery("SELECT * FROM Answers WHERE ID = " + arrayOfQuestions[currentQuestion]);
            while(rs.next()){
                correctAnswer = rs.getString("CorrectAnswer");
                falseAnswer1 = rs.getString("FalseAnswer1");
                falseAnswer2 = rs.getString("FalseAnswer2");
                falseAnswer3 = rs.getString("FalseAnswer3");
            }
            
            switch(answerRandomArray[0]){
                case 0: jButton0.setText(correctAnswer); 
                        buttonWithCorrectAnswer = 0;
                break;
                
                case 1: jButton1.setText(correctAnswer);
                        buttonWithCorrectAnswer = 1;
                break;
                
                case 2: jButton2.setText(correctAnswer);
                        buttonWithCorrectAnswer = 2;
                break;
                
                case 3: jButton3.setText(correctAnswer);
                        buttonWithCorrectAnswer = 3;
                break;
            }
            
            switch(answerRandomArray[1]){
                case 0: jButton0.setText(falseAnswer1); break;
                case 1: jButton1.setText(falseAnswer1); break;
                case 2: jButton2.setText(falseAnswer1); break;
                case 3: jButton3.setText(falseAnswer1); break;
            }
            
            switch(answerRandomArray[2]){
                case 0: jButton0.setText(falseAnswer2); break;
                case 1: jButton1.setText(falseAnswer2); break;
                case 2: jButton2.setText(falseAnswer2); break;
                case 3: jButton3.setText(falseAnswer2); break;
            }
            
            switch(answerRandomArray[3]){
                case 0: jButton0.setText(falseAnswer3); break;
                case 1: jButton1.setText(falseAnswer3); break;
                case 2: jButton2.setText(falseAnswer3); break;
                case 3: jButton3.setText(falseAnswer3); break;
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuizWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void shuffle(int[] answerRandomArray) {
        int temp;
        Random random = new Random();
        int min = 0;
        int max = 3;
        
        for(int i = 0; i < 4; i++){
            temp = answerRandomArray[i];
            int randomNumber = random.nextInt(max - min + 1) + min;
            answerRandomArray[i] = answerRandomArray[randomNumber];
            answerRandomArray[randomNumber] = temp;
        }
    }
    
    private void endOfGame(){
        EndWindow ew = new EndWindow(score, wrongAnswerScore);
        ew.setLocation(200, 100);
        ew.setVisible(true);
        
        this.dispose();
    }
/*
    private void removeFocusPaintedOnButtons() {
        jButton0.setFocusPainted(false);
        jButton1.setFocusPainted(false);
        jButton2.setFocusPainted(false);
        jButton3.setFocusPainted(false);
        jButtonNextQuestion.setFocusPainted(false);
    }*/
}
